Grid - это сеточная структура, которая позволяет регулировать
колонки и строки так, как мы захотим.

Для того, чтобы использовать Grid, необходимо применить к блоку
свойство в CSS - display:grid;
А дальше прописывать необходимые для нас свойства блока.

1)display: grid; /*Определяет блок, как Grid сетку*/
==================================================================================================

2)grid-template-columns: 100px 100px 100px; /* - задает количество колонок.*/
grid-template-rows: 100px 100px 100px; /* - задает количество рядов.*/
==================================================================================================

3)grid-column-gap:100px; /* - задает разрыв между колонками.*/
grid-row-gap:100px; /* - задает разрыв между строками */
grid-gap:10px 10px; /* - задает разрыв между колонками и строками. Первое значение - разрыв между рядов, второе - между столбцами.
==================================================================================================

4)grid-template-columns:repeat(2,1fr) - функция repeat повторяет значения свойства.
Первый аргумент - количество повторений, второй аргумент - размер.
==================================================================================================

5)grid-template-columns:minmax(100px,200px) 100px; - функция minmax позволяет делать блок резиновым.
Первый аргумент - минимальное значение блока, второй аргумент - максимальное значение.
Значения максимальные относительно окна экрана(если экран позволяет расширить блок до 200px, то он его расширит.)
Минимальное значение работает аналогично.
Также значение можно выставить - auto. В итоге блок будет подстраиваться автоматически под содержимое блока.
==================================================================================================

1fr - единица измерения для адаптивной верстки строго в Grid.

Особенности:
-Если нам необходимо, чтобы блок был резиновый и подстраивался под сжатие экрана, то лучше использовать для блока fr.
-Если нам необходимо, чтобы блок был конкретного размера, то мы можем его указать в px.
-Если нам необходимо, чтобы блок менялся по размеру на конкретных значениях, то можем использовать функцию minmax со значением auto.
==================================================================================================

6)grid-auto-flow: row; - определяет направление контента. Может принимать значение - row(ряд), column(колонка).
==================================================================================================

7)Явная и неявная сетка.

Явная сетка - это то, попадает внутрь сетки согласно свойствам.
Например:

.grid{
    display:grid;
    grid-template-column:100px 100px 100px;
    grid-template-rows:100px 100px;
}
Здесь мы указали, что у нас будут 3 колонки по 100px, и 2 ряда по 100px.
Если контента у нас например 6 блоков, то они попадут ровно в эти колонки и ряды.

НО!!

Если бы у нас было больше 6 блоков, то мы столкнулись бы с неявной сеткой и другие блоки поменяли бы свои размеры,
следующие за этими шестью.

grid-auto-rows:200px; - задает размеры для рядов, которые не попали в сетку.
grid-auto-columns:200px; - задает размеры для колонок, которые не попали в сетку.

8)Автоматические колонки.
==================================================================================================
.grid{
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
}

Функция auto-fill делает автозаполнение сетки, создавая переносы ячеек на новые строки.
При этом он будет стараться делать так, чтобы на строка заполнялась максимальным количеством блоков,
при этом уменьшая их размеры.

.grid{
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}

Делает тоже самое, что и auto-fill, но пространство ряда она старается заполнить полностью.
В итоге блоки расширяются.

9)Перемещение ячеек внутри сетки.
==================================================================================================

Это линии между блоками внутри сетки.

.grid>div:nth-child(1){
    grid-column-start: 1;
    grid-column-end: 5;
}

Благодаря этой записи мы можем регулировать то, с какой линии колонки
начнется и закончится блок.

Также есть сокращенная запись этих двух свойств.

grid-column:1/5;

Аналогично происходит работа и с линиями рядов:

grid-row:2;

10)Выравниванье ячеек внутри колонок и рядов.
==================================================================================================
justify-items:stretch; - свойства растягивает ячейку по горизонтали.
align-items:stretch; - свойство растягивает ячекй по вертикали.

Принимает значение start, end, center, stretch.

Если нам нужно поправить только одну ячейку, то мы будем использовать:

.grid>div:nth-child(1){
    justify-self:stretch;
    align-self:stretch;
}

11)Сокращенная запись grid-template.
==================================================================================================
grid-template описывает в начале ряды, а потом колонки.
grid-template:repeat(3,1fr)/repeat(3,1fr)

12)Области сетки(Grid areas).
==================================================================================================
html,
body{
    margin:0;
    height: 100%;
}

.grid *{
    padding: 10px 15px;
    background-color: rgb(96,143,204);
    border: 1px solid rgb(24,84,133);
    text-align: center;
    font-size: 22px;
    font-family: sans-serif;
    color: #fff;
}

/*Сетка*/

.grid{
    height: 100%;
    display: grid;
    grid-gap:20px;
    grid-template-columns: 200px 1fr;
    grid-template-rows: 100px 1fr 100px;
    grid-template-areas:
      "header header"
      "aside main"
      "footer footer";
}

header{
    grid-area:header;
}

aside{
    grid-area:aside;
}

main{
    grid-area:main;
}

footer{
    grid-area:footer;
}

HTML:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>Grid</title>
</head>
<body>
    <div class="grid">
        <header>Header</header>
        <aside>Sidebar</aside>
        <main>Main</main>
        <Footer>Footer</Footer>
    </div>
</body>
</html>

13)Вложенные сетки.
==================================================================================================
Сетки можно вставлять внутрь других сеток.