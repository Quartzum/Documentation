Next.JS - это фреймворк для React, идея которого заключается в том, что вы можете создавать
React-приложения, с поддержкой SSG, SSR, CSR, Typescript, предзагрузкой роутов и многого другого,
минимально настраивая конфигурацию.

1)SPA - Single Page Application.
Одностраничное приложение - это веб-приложение или веб-сайт, использующий единственный HTML-документ
как оболочку для всех веб-страниц и организующий взаимодействие с пользователем через динамически
подгружаемые HTML, CSS, JavaScript, обычно посредством AJAX.

AJAX -  подход к построению интерактивных пользовательских интерфейсов веб-приложений,
заключающийся в «фоновом» обмене данными браузера с веб-сервером. В результате при обновлении данных
веб-страница не перезагружается полностью, и веб-приложения становятся быстрее и удобнее.

2)CSR - Client Side Rendering.
Рендеринг на клиенте - это рендеринг приложения в браузере с помощью DOM.

3)SSR - Server Side Rendering.
Рендеринг на сервере - это рендеринг клиентской части приложения на сервере.

4)SSG - Static Site Generator. 
Статическая генерация сайтов - это генерация всех HTML страниц приложения в момент сборки.
Самый старый тип рендеринга приложения.

Основы:
==================================================================================================
Базовая структура:
1).next - файлы библиотеки next.
2)node_modules - файлы библиотеки node.
3)pages - папка с js компонентами(страницами).
4)package.json - файл зависимостей.
4)package.json - файл зависимостей.

1)Перемещение между страницами.
==================================================================================================

В Next, в папке pages, хранятся компоненты, или их еще можно назвать страницами проекта. Названия
страниц напрямую влияют на то, как мы на них переходим. Например:

pages - users.js.
На эту страницу мы можем перейти, если напишем в поисковой строке /users.

Чтобы не перезапускать страницу при переходе на другой URL мы можем использовать тег Link:

import Link from 'next/Link'

<Link href="/"><a>Главная</a></Link> 

2)Стилизация компонентов внутри компонента.
==================================================================================================
<style jsx>
            {`
                .navbar{
                    background:orange;
                    padding:15px;
                }
                
            `}
</style>

3)Динамическая маршрутизация.
==================================================================================================
Для того, чтобы генерировать динамически страницы мы можем создать папку с файлом [id].js.
Этот файл позволит выцеплять из URL id при переходе на ссылку.

Пример:

Здесь с помощью хука useState

import Link from 'next/link'
import {useState} from 'react'

const users = () => {
    const[users, setUsers] = useState([
        {id:1, name:'petya'},
        {id:2, name:'vasya'},
    ])
    return (
        <div>
            <h1>Список пользователей</h1>
            <ul>
                {users.map(user=>
                  <li key={user.id}>
                    <Link href={`/users/${user.id}`}>
                       <a>{user.name}</a>
                    </Link>
                  </li>
               
                )}
            </ul>
        </div>
    );
}

export default users;

