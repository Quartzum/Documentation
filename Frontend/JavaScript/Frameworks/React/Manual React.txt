1.Что такое React?
==================================================================================================
React - это библиотека JS.
React работает на DOM архитектуре.
Принцип работы React основан на том, что проект делится на компоненты, в которых весь код пишется
в форме JSX-языка(JavaScript с возможностью писать в нем HTML). По сути весь код на React написан,
только за счет JavaScript.

4.Структура React
==================================================================================================
1.node_modules - модули Node.js.
2.public - содержит файл index.html, в который рендерится весь HTML код.
3.src - основные компоненты React.
4..gitignore - файл игнорирования.
5.package.json - файл конфигурации, из которого он ставит библиотеки, зависимости и другие параметры
проекта.
6.README.md - инструкция для приложения.
7.package.json - содержит зависимости и библиотеки необходимые для проекта. При помощи команды
npm install -устанавливает все эти зависимости.
ВАЖНО!!! - предназначен для блокировки зависимостей от определенного номера версии.
8.package-lock.json - содержит зависимости и библиотеки необходимые для проекта. При помощи команды
npm install -устанавливает все эти зависимости.
ВАЖНО!!! - файле перечислены зависимости вашего приложения и зависимости всех его зависимостей.
Другими словами, он описывает, какую версию каждого отдельного пакета вы установили.
9.tsconfig.json - содержит настройки проекта на typescript.

4.1 Компоненты public
==================================================================================================
1.index.html - основной html файл проекта.
React обращается к нему через <div id="root"></div> по id. В нем будет идти все отображение.
2.manifest.json - Файл манифеста содержит информацию об иконках, цветовой теме, ориентации экрана,
начальном URL и т.д. Используется для создания виджета в закладках браузеров.
3.robots.txt - В файле robots.txt содержатся инструкции, которые говорят поисковым роботам,
какие URL на вашем сайте им разрешено обрабатывать. 
С его помощью можно ограничить количество запросов на сканирование и тем самым снизить нагрузку на сайт.

4.2 Компоненты src
==================================================================================================
1.index.js - получает файлы блока из файла index.html. Также сюда рендериться компонент App.
2.index.css - основной файл стилей.
3.App.js - базовый компонент.

4.setupTests.js - 
5.react-app-env.d.ts - 

5.Компоненты.
==================================================================================================

React разбивает HTML страницу на компоненты(компонент menu, navbar и т.д.), чтобы с ними было
легче работать, соединять и разбивать.
Компоненты аналогичны во многом функциям из JS. Они хранят состояние с помощью свойств и возвращают
элемент React, который затем появится на Web-странице.

Название компонентов должно начинаться с большой буквы. Названия могут быть любыми.

Компоненты бывают трех типов:
==================================================================================================
1.Функциональный компонент.(rfc - снипет для создания).
После создания компонента внутри него создается:

export default function Fcomponent() - прописывается, чтобы этот компонент можно определить
в другом компоненте.

2.Классовый компонент.(rсс - снипет для создания).
3.Компонент с использованием стрелочной функции.(rafc - снипет для создания).

ВАЖНО!!!
==================================================================================================
При попытке экспорта по default, когда мы только создаем файл, надо экспорт поместить вниз приложения. Пример:

import React from 'react'

const Menu = () => {
  return (
    <div>
        <h1>Arrow Function</h1>
    </div>
  )
}

export default Menu;

Чтобы работать с компонентами, необходимо их импортировать в файл App.js.
Компоненты можно импортировать в другие компоненты.

6.Props.
==================================================================================================
Props - это значения, которые мы хотим статически передать нашему компоненту.

Чтобы их использовать нужно указать значение в файле App.js, а также добавить props в конкретном компоненте.
Название свойств может быть любое, главное, чтобы они не были зарезервированы системой.

Пример:
1)Функциональный компонент:

import React from 'react'

export default function Fcomponent(props) {
  return (
    <div>
        <h1>Hello,{props.name} </h1>
    </div>
  )
}

Внутри App.js добавляем:

<Fcomponent name="Viktor"/>

2)Классовый компонент:

import React, { Component } from 'react'
import Menu from './Menu'

export default class Ccomponent extends Component {
  render() {
    return (
      <div>
        <h1>{this.props.number}</h1>
        <Menu/>
      </div>
    )
  }
}

Внутри App.js добавляем:

<Ccomponent number="18.09.1996"/>



3)Компонент со стрелочной функцией:

Также мы можем передать в props массив значений. Пример:

import React, { Component } from 'react'

export default class Ccomponent extends Component {
  render() {
    return (
      <div>
        <h1>{this.props.numbers.join(',')}</h1>
      </div>
    )
  }
}

Внутри App.js добавляем:

<Ccomponent numbers={[1,2,3,4,5]}/>

Если мы не указываем в App.js значение свойства props, то мы можем установить его по default. Пример:

import React, { Component } from 'react'
import Menu from './Menu'

export default class Ccomponent extends Component {
  render() {
    return (
      <div>
        <h1>{this.props.name}</h1>
        <Menu/>
      </div>
    )
  }
}

Ccomponent.defaultProps = {name: "Viktor"}

Внутри App.js:

<Ccomponent/>

В данном случае на экране появиться значение Viktor.
Если в App.js будет прописано новое значение name, то оно изменится на странице.

7.State
==================================================================================================
Props предоставляет входные данные, которые передаются в компонент извне.
State хранит данные в компоненте и полностью зависит от самого компонента.
Также в отличии от Props, значение State можно изменять.
State описывает визуальные свойства элемента, которые могут изменяться при взаимодействии с пользователем.
Например: нажали на кнопку и изменили цвет.

1)Первый способ добавить state:

Для того, чтобы использовать State создаем конструктор в компоненте и меняем props на state:

import React, { Component } from 'react'

export default class Ccomponent extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       name: "Viktor"
    }
  }
  render() {
    return (
      <div>
        <h1>{this.state.name}</h1>
      </div>
    )
  }
}

2)Второй способ добавить state:

import React, { Component } from 'react'

export default class Ccomponent extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       name: "Viktor"
    }
  }
  render() {
    const name = this.state.name;
    return (
      <div>
        <h1>{name}</h1>
      </div>
    )
  }
}

Смена имени на экране при нажатии на кнопку:

import React, { Component } from 'react'

export default class Ccomponent extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       name: "Viktor"
    };

    this.handleClick = this.handleClick.bind(this); - данная запись нужна, т.к. по умолчанию метод класса не привязан в JS к контексту.
  }

  handleClick(){ - функция обращается к конструктору со state и передает данные в заголовок h1.
    this.setState({
      name: "Max"
    })
  }
  render() {
    return (
      <div>
        <h1>{this.state.name}</h1>
        <button onClick={this.handleClick}>Click</button> - кнопка, при нажатии на которую срабатывает событие onClick. Оно обращается к функции handleClick.
      </div>
    )
  }
}

Методы класса используют ключевое слово this, чтобы он мог получить доступ к свойствам класса.

При нажатии на кнопку текст появляется или пропадает:

import React, { Component } from 'react'

export default class Ccomponent extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       visibility: false
    };

    this.handleClick = this.handleClick.bind(this);
  }

  handleClick(){
    this.setState(state =>({
      visibility: !state.visibility
    }));
  }
  render() {
      if (this.state.visibility){
    return (
      <div>
        <h1>Now you see me</h1>
        <button onClick={this.handleClick}>Click</button>
      </div>
    );
  } else {
    return(
    <div>
        <button onClick={this.handleClick}>Click</button>
    </div>
    )
  }
 }
}

Счетчик увеличения,уменьшения и сброса:

import React, { Component } from 'react'

export default class Ccomponent extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       count:0
    };

    this.increment = this.increment.bind(this);
    this.decrement = this.decrement.bind(this);
    this.reset = this.reset.bind(this);
  }

  increment(){
    this.setState(state =>({
      count: state.count+1
    }));
  }

  decrement(){
    this.setState(state =>({
      count: state.count-1
    }));
  }

  reset(){
    this.setState({
      count:0
    })
  }

  render() {
     return(
      <div>
        <button onClick={this.increment}>increment</button>
        <button onClick={this.decrement}>decrement</button>
        <button onClick={this.reset}>reset</button>
        <h1>Current: {this.state.count}</h1>
      </div>
     )
 }
}

8.Работа с формами
==================================================================================================
Разница при работе с формами в HTML и React:

В HTML состоянием форм(их изменением) управляет сам HTML, а в React это происходит благодаря state.
Происходит это только через вызов setState.
Это сдеано для того, чтобы сам React мог контролировать форму и ее поведение.

Пример управляемой формы(при нажатии на кнопку снизу будет выводиться информация):

import React, { Component } from 'react'

export default class Ccomponent extends Component {
    constructor(props) {
      super(props)
    
      this.state = {
         input:"", - сюда можно вписать, что-то по дефолту.
         submit:""
      };
      this.handleChange = this.handleChange.bind(this);
      this.handleSubmit = this.handleSubmit.bind(this);
    }
    
    handleChange(event){
        this.setState({
            input:event.target.value
        });
    }

    handleSubmit(event){
        event.preventDefault(); - обработчик отправки, который предотвращает обновление страницы.
        this.setState({
            submit: this.state.input
        });
    }

  render() {
    return (
      <div>
        <form onSubmit={this.handleSubmit}> - обработчик отправки будет вызван при отправки формы.
            <input value={this.state.input} onChange={this.handleChange}/>
            <button type='submit'>Submit</button>
        </form>
        <h3>{this.state.submit}</h3>
      </div>
    )
  }
}

Пример ToDo приложения:

import React, { Component } from 'react'

export default class Ccomponent extends Component {
    constructor(props) {
      super(props)
    
      this.state = {
         input:"",
         items:[]
      };
      this.handleChange = this.handleChange.bind(this);
      this.handleSubmit = this.handleSubmit.bind(this);
    }
    
    handleChange(event){
        this.setState({
            input:event.target.value
        });
    }

    handleSubmit(event){
        event.preventDefault();
        this.setState({
            input: this.state.input,
            items:[...this.state.items, this.state.input]
        });
    }

  render() {
    return (
      <div>
        <form onSubmit={this.handleSubmit}>
            <input value={this.state.input} onChange={this.handleChange}/>
            <button type='submit'>Submit</button>
        </form>
        <ul>
            {this.state.items.map((item, index)=>(
            <li key={index}>{item}</li>
            ))}
        </ul>
      </div>
    );
  }
}

9.CSS стилизация. Как подключить библиотеку Material Ui, Bootstrap
==================================================================================================
Первый способ работы со стилями:

<h1 style={{color:"yellow", backgroundColor:"green"}}>Hello world</h1> - корректная запись css свойства в jsx.
В jsx ожидается, что будет объект, который будет выглядеть парой ключ-значение.
Ключ будет - свойство объекта, а значение значением.
Слова через -, пишуться camelCase.

Второй способ работы со стилями:

  render() {
    const style={
        color:"yellow",
        backgroundColor:"green"
        fontSize:"1.2em" - если пиксели, то можно не добавлять двойные скобки.
    }
    return (
      <div>
        <h1 style={style}>Hello world</h1>

Третий способ:
Создать отдельный файл со стилями и импортировать в компонент:

.hello{
    color:yellow;
    background-color:green;
    font-size:1.2em;
}

<h1 className='hello'>Hello world</h1>

Четвертый способ:

npm install @mui/material @mui/styled-engine-sc styled-components - установка библиотеки MaterialUI.
npm install @mui/icons-material - подключаем иконки.

<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
/>

<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/icon?family=Material+Icons"
/>

После подключения модулей библиотека будет работать и можно брать готовые компоненты с их сайта.

10.Жизненный цикл компонента
==================================================================================================
Жизненный цикл состоит из:

1)Инициализация - компонент начинает свое существование. устанавливаются
props и state. Это происходит в конструкторе.

2)Монтаж - компонент монтируется в DOM.
Здесь становится доступен метод ComponentDidMount().
Он становится доступен, после того, как компонент монтируется в DOM.

3)Обновление - это то место, где происходит обновление state и props, и происходит
повторный рендеринг.
Сюда можно отнести то, когда пользователь нажимает на кнопку, отправляет форму и т.п.
Здесь становится доступен метод shouldComponentUpdate().
Он обозначает должен ли компонент обновлятся или нет. По умолчанию стоит в True.

componentDidUpdate() - ставится после повторного рендеринга компонента.

4)Размонтированье - удаленье файла.
componentWillUnmount() - ставится после размонтированья компонента.

11) Передача данных между компонентами.
==================================================================================================
В React поток данных однонаправленный, то есть передается от родителя к ребенку через props.

Пример для отслеживанья состояния компонента:
import React, { Component } from 'react'
import Fcomponent from './Fcomponent'


export default class Ccomponent extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       name:"Button is not pressed"
    }
    this.updateData=this.updateData.bind(this);
  }

  updateData=(value)=>{
    this.setState({
      name:value
    })
  }

  render() {
    return (
      <div>
        <p>State: {this.state.name}</p>
        <Fcomponent updateData={this.updateData}/>
      </div>
      
    )
  }
}


import React, { Component } from 'react'

export default class Fcomponent extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
        name:"Button pressed"
    }
  }
  render() {
    return (
      <div>
        <button onClick={()=>{this.props.updateData(this.state.name)}}>Press button</button>
      </div>
    )
  }
}

12)Работа с API на примере. Fetch запрос Api.
==================================================================================================
API - набор данных, с указанными в формате файла .json, с указанными конечными точками.
Когда мы получаем данные из API, мы хотим получить доступ к определенным конечным точкам.
Пример:

import React, { Component } from 'react'

export default class Ccomponent extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       error:null,
       isLoaded:false,
       items:[]
    };
  }

  componentDidMount(){
    fetch("www.thecocktaildb.com/api/json/v1/1/filter.php?c=Ordinary_Drink")
    .then(res=>res.json())
    .then(
      (result)=>{
        this.setState({
          isLoaded:true,
          items:result.drinks
        });
      },
      (error)=>{
        this.setState({
          isLoaded:true,
          error
        });
      }
    )
  }
  render() {
    const {error, isLoaded, items} = this.state;
    if(error){
      return <p>Error: {error.message}</p>;
    }
    else if(!isLoaded){
      return <p>Loading...</p>;
    }
    else{
      return(
        <ul>
          {items.map(item=>(
            <li key={item.name}>
            {item.strDrink}
            <img width={50} height={50} alt={"sometext"} src={item.strDrinkThumb}/>
            </li>
          ))}
        </ul>
      );
    }
  }
}

13)Роутинг. Маршрутизация и создание страниц сайта.
==================================================================================================
Позволяет сопоставлять запросы приложения с компонентом.
В основе работы лежит modulereact.