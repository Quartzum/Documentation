JavaScript - мультипарадигменный язык программирования, в первую очередь предназначенный для того,
чтобы делать веб-страницы живыми.

Парадигма программирования - это стиль написания кода.

Иерархия парадигм:

1)Императивное программирование - последовательность команд. Последовательно выполняется и результаты
предыдущих команд могут быть прочитаны последующими.
По сути мы описываем КАК программа должна решать задачу.
99,9% языков считаются построенными на императивном программировании.
==================================================================================================
2)Декларативное программирование - в ней задается спецификация решения задач.
По сути мы описываем ЧТО программа должна делать, чтобы решить задачу.
Яркий представитель - SQL.

Особенности:

-Т.к. команды выполняются последовательно, то существует шанс того, что в программе появится баг 
из-за увеличения кода.
==================================================================================================
3)Процедурное программирование - надстройка над ИП(императивным программированием), позволяющая писать
процедуры или функции.
Также 99,9% языков считаются процедурными.

Особенности:
-Процедура может иметь входные аргументы, но не иметь выходных.
-Функция может иметь входные и выходные аргументы.
==================================================================================================
4)Функциональная программирование - подкатегория декларативного программирования.
В нем выход одной функции является входом для другой.
Комбинация функций является программой, которая решает задачу.

Особенности:
Чтобы функция соответствовала ФП, необходимо:
-функция не изменяет состояние других функций.
-принимает входные и выходные аргументы.
-возвращает результат

Такая функция считается чистой.

Большинство языков программирования позволяют в той, или иной степени отходить от этих особенностей.
==================================================================================================
5)Структурной программирование - добавляется новый слой абстрации - блоки. Блоки разделяются между собой
словами begin или end, или {}.
По своей сути он позволяет группировать данные и функции в структуры(блоки) облегчая прочтение кода.
Яркий представитель - C.

Оператор go to - он позволял в ИП, ПП, ДП переходить от одного куска кода к другому. В итоге в больших программах
получался хаос, и разработчики пришли к структурному программированью, где его больше нет.

Особенности:
-последовательность
-ветвление(циклы if/else)
-цикл while
-процедуры/функции
==================================================================================================
6)Объекто-ориентированное программирование(ООП) - добавляет новый слой абстракции - классы и объекты,
а также понятия инкапсуляция, наследование, полиморфизм.

Класс - это как конструктор, фундамент.
Объект - это экземпляр класса.
Внутри объектов хранятся функции.

Объект стоит на 3 понятиях:

1.Наследование - класс наследует что-либо от другого класса.

2.Полиморфизм - реализация чего-либо в родительском классе, в другом классе меняется, но по факту
является тем же, что и было в родительском классе.

3.Инкапсуляция - все параметры, функции и т.п. должны находится внутри самого класса.

==================================================================================================
==================================================================================================
==================================================================================================
1)Возможности JavaScript.
==================================================================================================
-Добавлять новый HTML-код на страницу, изменять существующее содержимое, модифицировать стили.
-Реагировать на действия пользователя, щелчки мыши, перемещения указателя, нажатия клавиш.
-Отправлять сетевые запросы на удалённые сервера, скачивать и загружать файлы (технологии AJAX и COMET).
-Получать и устанавливать куки, задавать вопросы посетителю, показывать сообщения.
-Запоминать данные на стороне клиента («local storage»).
2)JS не может.
==================================================================================================
-JavaScript на веб-странице не может читать/записывать произвольные файлы на жёстком диске, копировать
их или запускать программы. Он не имеет прямого доступа к системным функциям ОС.

-Современные браузеры позволяют ему работать с файлами, но с ограниченным доступом, и предоставляют его,
только если пользователь выполняет определённые действия, такие как «перетаскивание» файла в окно браузера
или его выбор с помощью тега <input>.

-Существуют способы взаимодействия с камерой/микрофоном и другими устройствами, но они требуют явного
разрешения пользователя. Таким образом, страница с поддержкой JavaScript не может незаметно включить
веб-камеру, наблюдать за происходящим и отправлять информацию в ФСБ.

-Различные окна/вкладки не знают друг о друге. Иногда одно окно, используя JavaScript, открывает другое окно.
Но даже в этом случае JavaScript с одной страницы не имеет доступа к другой, если они пришли с разных сайтов
(с другого домена, протокола или порта).

-Это называется «Политика одинакового источника» (Same Origin Policy). Чтобы обойти это ограничение,
обе страницы должны согласиться с этим и содержать JavaScript-код, который специальным образом
обменивается данными.

-то ограничение необходимо, опять же, для безопасности пользователя. Страница https://anysite.com,
которую открыл пользователь, не должна иметь доступ к другой вкладке браузера с URL https://gmail.com
и воровать информацию оттуда.

-JavaScript может легко взаимодействовать с сервером, с которого пришла текущая страница. Но его способность
получать данные с других сайтов/доменов ограничена. Хотя это возможно в принципе, для чего требуется
явное согласие (выраженное в заголовках HTTP) с удалённой стороной. Опять же, это ограничение безопасности.

3)Главные приемущества JS.
==================================================================================================
-Полная интеграция с HTML/CSS.
-Простые вещи делаются просто.
-Поддерживается всеми основными браузерами и включён по умолчанию.

4)Ответвления JS.
==================================================================================================
-CoffeeScript добавляет «синтаксический сахар» для JavaScript. Он вводит более короткий синтаксис,
который позволяет писать чистый и лаконичный код. Обычно такое нравится Ruby-программистам.

-TypeScript концентрируется на добавлении «строгой типизации» для упрощения разработки и поддержки
больших и сложных систем. Разработан Microsoft.

-Flow тоже добавляет типизацию, но иначе. Разработан Facebook.

-Dart стоит особняком, потому что имеет собственный движок, работающий вне браузера
(например, в мобильных приложениях). Первоначально был предложен Google, как замена JavaScript,
но на данный момент необходима его транспиляция для запуска так же, как для вышеперечисленных языков.

-Brython транспилирует Python в JavaScript, что позволяет писать приложения на чистом Python без JavaScript.

Полезные ссылки:

https://www.ecma-international.org/publications-and-standards/standards/ecma-262/ - стандарт ECMAScript.
https://learn.javascript.ru/manuals-specifications - пособие по основам JS.
https://learn.javascript.ru/browser-environment - пособие по основам веб-JS.

https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference - есть полезные ссылки с примерами JS.
MDN ... - вводя так в поисковике можно найт пример на сайте указаном выше.

https://docs.microsoft.com/ru-ru/ - сайт Майкрософт. Если что-то нужно специфическое по работе IE, 
то можно посмотреть там.
RegExp MSDN... - тот же принцип поиска, что и выше.

https://caniuse.com/ - сайт поддержки новых функций, внутри движков браузеров.
